; knowbug_client プロキシー
; LICENSE: CC0-1.0 <https://creativecommons.org/publicdomain/zero/1.0/deed.ja>

; knowbug_client.hsp をデバッグ実行する。
; また、標準入出力を中継する。

; 開発版の knowbug がインストールされている HSP を使って knowbug_client をデバッグ実行すると、
; そのデバッガーも knowbug_client を実行しようとして、無限にプロセスが起動してしまう。
; これを避けるため、knowbug の開発用とは他の HSP のインストールディレクトリを使う。

; knowbug_client_proxy.txt の1行目に knowbug_client.hsp への絶対パスを、
; 2行目に HSP のインストールディレクトリ (KNOWBUG_CLIENT_HSP3_ROOT) を書いておくこと。

#include "hsp3utf.as"
#include "hspcmp.as"
#include "hspext.as"
#include "mod_child_process.hsp"
; #include "mod_stdin.hsp"
; #include "mod_stdout.hsp"

#packopt name "knowbug_client_proxy"
; #packopt hide 1

#define true 1
#define false 0

#define global gsel_hide (-1)
#define global gsel_show 1
#define global mesbox_readonly 0
#define global objmode_font 2

#define global EXIT_SUCCESS 1
#define global EXIT_FAILURE 1

#enum global s_default_window_id = 0

	; gsel s_default_window_id, gsel_hide

	sdim s_error, 0x10000
	s_exit_code = EXIT_FAILURE

	s_obj_name = "knowbug_client.ax"

	s_runtime_name = ""

	; 1: デバッグ情報を埋め込む, 4: utf-8 input
	s_compile_opts = 1 | 4

	; 32: utf-8 output
	s_pp_opts = 32

	; 1: デバッグウィンドウ表示
	s_debug_mode = 1

	sdim s_config
	sdim s_src_name
	sdim s_hsp_root

	s_stdout_cap = 8 * 1024 * 1024 ; 8 MB
	sdim s_stdout_data, s_stdout_cap

	s_stdin_cap = 8 * 1024 * 1024 ; 8 MB
	sdim s_stdin_data, s_stdin_cap

	onexit gosub *l_on_exit

	gosub *l_load_config
	if stat == false {
		goto *l_fail
	}

	; stdin_init
	; if stat == false {
	; 	s_error = "stdin_init failed"
	; 	goto *l_fail
	; }

	; stdout_init
	; if stat == false {
	; 	s_error = "stdout_init failed"
	; 	goto *l_fail
	; }

	gosub *l_compile
	if stat == false {
		goto *l_fail
	}

	gosub *l_run
	if stat == false {
		goto *l_fail
	}

	s_exit_code = EXIT_SUCCESS
	end

*l_on_exit

	end s_exit_code

*l_load_config

	notesel s_config
	noteload dir_exe + "\\knowbug_client_proxy.txt"
	noteget s_src_name, 0
	noteget s_hsp_root, 1
	noteunsel
	return true

*l_compile

	hsc_ini s_src_name
	if stat {
		hsc_getmes s_error
		return false
	}

	hsc_objname s_obj_name
	if stat {
		hsc_getmes s_error
		return false
	}

	hsc_compath s_hsp_root + "\\common\\"
	if stat {
		hsc_getmes s_error
		return false
	}

	hsc_comp s_compile_opts, s_pp_opts, s_debug_mode
	if stat {
		hsc_getmes s_error
		return false
	}

	hsc3_getruntime s_runtime_name, s_obj_name
	if s_runtime_name == "" {
		s_runtime_name = "hsp3.exe"
	}

	s_runtime_path = s_hsp_root + "\\" + s_runtime_name
	return true

*l_run

	s_cmdline = "\"" + s_runtime_path + "\" " + s_obj_name + " " + dir_cmdline

	child_process_prepare s_cp

	; child_process_redirect_stdin s_cp
	; if stat == false {
	; 	s_error = "redirect_stdin failed"
	; 	return false
	; }

	; child_process_redirect_stdout s_cp
	; if stat == false {
	; 	s_error = "redirect_stdout failed"
	; 	return false
	; }

	child_process_spawn s_cp, s_cmdline
	if stat == false {
		s_error = "spawn failed"
		return false
	}

	; s_child_is_running = true
	; s_stdin_is_available = false ; true
	; s_stdin_changed = false
	; s_stdout_is_available = false ; true
	; s_stdout_changed = false

	; repeat
	; 	; 標準入出力をサブプロセスに転送する
	; 	; (転送処理が発生している間は await しない)
	; 	if s_stdin_is_available {
	; 		s_stdin_changed = false
	; 		s_stdout_changed = false

	; 		; 標準入力を転送する。
	; 		gosub *l_forward_stdin

	; 		; 標準出力を転送する。
	; 		gosub *l_forward_stdout

	; 		if s_stdin_changed || s_stdout_changed {
	; 			continue
	; 		}
	; 	}

	; 	; サブプロセスの終了を監視する
	; 	if s_child_is_running {
	; 		child_process_wait s_cp, 100 ; 4
	; 		s_child_is_running = stat == false
	; 	}

	; 	if s_child_is_running == false && s_stdin_is_available == false {
	; 		break
	; 	}

	; 	await 100
	; loop

	; child_process_close s_cp

	return s_error == ""

; *l_forward_stdin

; 	if s_stdin_is_available == false {
; 		return
; 	}

; 	stdin_read s_stdin_data, s_stdin_cap
; 	s_stdin_len = stat

; 	if s_stdin_len < 0 {
; 		logmes "WARN: STDIN stopped"
; 		s_stdin_is_available = false
; 		return
; 	}

; 	if s_stdin_len == 0 {
; 		return
; 	}

; 	child_process_write_stdin s_cp, s_stdin_data, s_stdin_len
; 	if stat < 0 {
; 		logmes "WARN: STDIN stopped"
; 		s_stdin_is_available = false
; 		return
; 	}

; 	s_stdin_changed = true
; 	return

; *l_forward_stdout

; 	if s_stdout_is_available == false {
; 		return
; 	}

; 	child_process_read_stdout s_cp, s_stdout_data, s_stdout_cap
; 	s_stdout_len = stat

; 	if s_stdout_len < 0 {
; 		logmes "WARN: STDOUT stopped"
; 		s_stdout_is_available = false
; 		return
; 	}

; 	if s_stdout_len == 0 {
; 		return
; 	}

; 	stdout_write s_stdout_data, s_stdout_len
; 	if stat < 0 {
; 		logmes "WARN: STDOUT stopped"
; 		s_stdout_is_available = false
; 		return
; 	}

; 	s_stdout_changed = true
; 	return

*l_fail

	title "knowbug_client_proxy"

	font "MS Gothic", 12
	objmode objmode_font
	mesbox s_error, ginfo_winx, ginfo_winy, mesbox_readonly

	gsel s_default_window_id, gsel_show
	stop
