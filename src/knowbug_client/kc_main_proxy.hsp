; knowbug_client プロキシー

; knowbug_client.hsp をデバッグ実行する。

; 開発版の knowbug がインストールされている HSP を使って knowbug_client をデバッグ実行すると、
; そのデバッガーも knowbug_client を実行しようとして、無限にプロセスが起動してしまう。
; これを避けるため、knowbug の開発用とは他の HSP のインストールディレクトリを使う。

; knowbug_client_proxy.txt の1行目に knowbug_client.hsp への絶対パスを、
; 2行目に HSP のインストールディレクトリ (KNOWBUG_CLIENT_HSP3_ROOT) を書いておくこと。

#include "hsp3utf.as"
#include "hspcmp.as"
#include "hspext.as"
#include "mod_child_process.hsp"

#packopt name "knowbug_client_proxy"
#packopt hide 1

#define true 1
#define false 0

#define global gsel_hide (-1)
#define global gsel_show 1
#define global mesbox_readonly 0
#define global objmode_font 2

#define global EXIT_SUCCESS 1
#define global EXIT_FAILURE 1

#enum global s_default_window_id = 0

	gsel s_default_window_id, gsel_hide

	sdim s_error, 0x10000
	s_exit_code = EXIT_FAILURE

	s_obj_name = "knowbug_client.ax"

	s_runtime_name = ""

	; 1: デバッグ情報を埋め込む, 4: utf-8 input
	s_compile_opts = 1 | 4

	; 32: utf-8 output
	s_pp_opts = 32

	; 1: デバッグウィンドウ表示
	s_debug_mode = 1

	sdim s_config
	sdim s_src_name
	sdim s_hsp_root

	onexit gosub *l_on_exit

	gosub *l_load_config
	if stat == false {
		goto *l_fail
	}

	gosub *l_compile
	if stat == false {
		goto *l_fail
	}

	gosub *l_run
	if stat == false {
		goto *l_fail
	}

	s_exit_code = EXIT_SUCCESS
	end

*l_on_exit

	end s_exit_code

*l_load_config

	notesel s_config
	noteload dir_exe + "\\knowbug_client_proxy.txt"
	noteget s_src_name, 0
	noteget s_hsp_root, 1
	noteunsel
	return true

*l_compile

	hsc_ini s_src_name
	if stat {
		hsc_getmes s_error
		return false
	}

	hsc_objname s_obj_name
	if stat {
		hsc_getmes s_error
		return false
	}

	hsc_compath s_hsp_root + "\\common\\"
	if stat {
		hsc_getmes s_error
		return false
	}

	hsc_comp s_compile_opts, s_pp_opts, s_debug_mode
	if stat {
		hsc_getmes s_error
		return false
	}

	hsc3_getruntime s_runtime_name, s_obj_name
	if s_runtime_name == "" {
		s_runtime_name = "hsp3.exe"
	}

	s_runtime_path = s_hsp_root + "\\" + s_runtime_name
	return true

*l_run

	s_cmdline = "\"" + s_runtime_path + "\" " + s_obj_name + " " + dir_cmdline

	dim s_cp
	child_process_spawn s_cp, s_cmdline
	if stat == false {
		s_error = "spawn failed"
		return false
	}

	child_process_wait s_cp, -1 ; infinite
	child_process_close s_cp
	return s_error == ""

*l_fail

	title "knowbug_client_proxy"

	font "MS Gothic", 12
	objmode objmode_font
	mesbox s_error, ginfo_winx, ginfo_winy, mesbox_readonly

	gsel s_default_window_id, gsel_show
	stop
