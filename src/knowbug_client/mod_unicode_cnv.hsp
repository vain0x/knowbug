; v1.0.0 <https://github.com/vain0x/hsp3-modules/tree/main/mod_unicode_cnv>

#ifndef included_mod_unicode_cnv_hsp
#define included_mod_unicode_cnv_hsp

; 文字列のエンコーディングを Unicode と相互変換する機能を提供する
;
; %note
; mod_unicode_cnv.hsp を #include すること。
; Win32 API を使用するため、Windows 上でのみ動作する。
#module m_unicode_cnv

#uselib "kernel32.dll"
#func MultiByteToWideChar "MultiByteToWideChar" sptr, sptr, sptr, sptr, sptr, sptr
#func WideCharToMultiByte "WideCharToMultiByte" sptr, sptr, sptr, sptr, sptr, sptr, sptr, sptr

#define true 1
#define false 0

#define NULL 0
#define CP_SJIS 932
#define CP_UTF8 65001

; HSP ランタイムの既定のエンコーディングを検出する。
#ifdef __hsp64__@
	#if __hspver__ < 0x3600
		#define CP_HSP CP_SJIS
	#else
		#define CP_HSP CP_UTF8
	#endif
#else
	#ifdef __hsp3utf__@
		#define CP_HSP CP_UTF8
	#else
		#define CP_HSP CP_SJIS
	#endif
#endif

; 特定のコードページのマルチバイト文字列を Unicode に変換する
;
; %prm
; cp, mb_str, mb_len, os_str, os_len
;
; int cp: コードページ
; var mb_str: 変換元のマルチバイト文字列の格納された変数
; int mb_len: mb_str のバイト数
; var os_str: 変換後の Unicode 文字列が格納される変数
; var os_len: os_str の文字数 (バイト数の半分) が格納される変数
;
; stat: 成功したら true
;
; %inst
; os_str を事前に初期化する必要はない。
; os_str は NULL 終端される。
#deffunc unicode_cnv_from_multibyte int cp, var mb_str, int mb_len, var os_str, var os_len, \
	local size

	os_str = ""

	assert mb_len >= 0
	if mb_len == 0 {
		wpoke os_str, 0, 0
		os_len = 0
		return true
	}

	MultiByteToWideChar cp, 0, varptr(mb_str), mb_len, NULL, 0
	size = stat
	if size == 0 {
		wpoke os_str, 0, 0
		os_len = 0
		return false
	}
	assert size >= 1

	os_len = size
	memexpand os_str, os_len * 2 + 2

	MultiByteToWideChar cp, 0, varptr(mb_str), mb_len, varptr(os_str), size
	size = stat
	if size == 0 {
		wpoke os_str, 0, 0
		os_len = 0
		return false
	}
	assert size == os_len

	wpoke os_str, os_len * 2, 0
	return true

; Unicode 文字列を特定のコードページのマルチバイト文字列に変換する
;
; %prm
; cp, os_str, os_len, mb_str, mb_len
;
; int cp: コードページ
; var os_str: 変換元の Unicode 文字列が格納された変数
; int os_len: os_str の文字数 (バイト数の半分)
; var mb_str: 変換後のマルチバイト文字列が格納される変数
; var mb_len: mb_str のバイト数が格納される変数
;
; stat: 成功したら true
;
; %inst
; mb_str を事前に初期化する必要はない。
; mb_str は NULL 終端される。
;
; %note
; 参考: <https://docs.microsoft.com/en-us/windows/win32/api/stringapiset/nf-stringapiset-widechartomultibyte>
#deffunc unicode_cnv_to_multibyte int cp, var os_str, int os_len, var mb_str, var mb_len, \
	local size

	mb_str = ""

	assert os_len >= 0
	if os_len == 0 {
		mb_len = 0
		return true
	}

	WideCharToMultiByte cp, 0, varptr(os_str), os_len, NULL, 0, NULL, NULL
	size = stat
	if size == 0 {
		mb_len = 0
		return false
	}
	assert size >= 1

	mb_len = size

	memexpand mb_str, size + 1

	WideCharToMultiByte cp, 0, varptr(os_str), os_len, varptr(mb_str), size, NULL, NULL
	size = stat
	if size == 0 {
		mb_len = 0
		return false
	}
	assert size == mb_len

	poke mb_str, mb_len, 0
	return true

; shift_jis 文字列を Unicode に変換する
;
; %prm
; sjis_str, sjis_len, os_str, os_len
;
; var sjis_str: 変換元の shift_jis 文字列の格納された変数
; int sjis_len: sjis_str のバイト数
; var os_str: 変換後の Unicode 文字列が格納される変数
; var os_len: os_str の文字数 (バイト数の半分) が格納される変数
;
; stat: 成功したら true
;
; %inst
; os_str を事前に初期化する必要はない。
; os_str は NULL 終端される。
#deffunc unicode_cnv_from_sjis var sjis_str, int sjis_len, var os_str, var os_len

	unicode_cnv_from_multibyte CP_SJIS, sjis_str, sjis_len, os_str, os_len
	return stat

; Unicode 文字列を shift_jis に変換する
;
; %prm
; os_str, os_len, sjis_str, sjis_len
;
; var os_str: 変換元の Unicode 文字列が格納された変数
; int os_len: os_str の文字数 (バイト数の半分)
; var sjis_str: 変換後の shift_jis 文字列が格納される変数
; var sjis_len: sjis_str のバイト数が格納される変数
;
; stat: 成功したら true
;
; %inst
; sjis_str を事前に初期化する必要はない。
; sjis_str は NULL 終端される。
#deffunc unicode_cnv_to_sjis var os_str, int os_len, var sjis_str, var sjis_len

	unicode_cnv_to_multibyte CP_SJIS, os_str, os_len, sjis_str, sjis_len
	return stat

; UTF-8 文字列を Unicode に変換する
;
; %prm
; utf8_str, utf8_len, os_str, os_len
;
; var utf8_str: 変換元の UTF-8 文字列の格納された変数
; int utf8_len: utf8_str のバイト数
; var os_str: 変換後の Unicode 文字列が格納される変数
; var os_len: os_str の文字数 (バイト数の半分) が格納される変数
;
; stat: 成功したら true
;
; %inst
; os_str を事前に初期化する必要はない。
; os_str は NULL 終端される。
#deffunc unicode_cnv_from_utf8 var utf8_str, int utf8_len, var os_str, var os_len

	unicode_cnv_from_multibyte CP_UTF8, utf8_str, utf8_len, os_str, os_len
	return stat

; Unicode 文字列を UTF-8 に変換する
;
; %prm
; os_str, os_len, utf8_str, utf8_len
;
; var os_str: 変換元の Unicode 文字列が格納された変数
; int os_len: os_str の文字数 (バイト数の半分)
; var utf8_str: 変換後の UTF-8 文字列が格納される変数
; var utf8_len: utf8_str のバイト数が格納される変数
;
; stat: 成功したら true
;
; %inst
; utf8_str を事前に初期化する必要はない。
; utf8_str は NULL 終端される。
#deffunc unicode_cnv_to_utf8 var os_str, int os_len, var utf8_str, var utf8_len

	unicode_cnv_to_multibyte CP_UTF8, os_str, os_len, utf8_str, utf8_len
	return stat

; HSP ランタイムの既定のエンコーディングの文字列を Unicode に変換する
;
; %prm
; mb_str, mb_len, os_str, os_len
;
; var mb_str: 変換元のマルチバイト文字列の格納された変数
; int mb_len: mb_str のバイト数
; var os_str: 変換後の Unicode 文字列が格納される変数
; var os_len: os_str の文字数 (バイト数の半分) が格納される変数
;
; stat: 成功したら true
;
; %inst
; os_str を事前に初期化する必要はない。
; os_str は NULL 終端される。
#deffunc unicode_cnv_from_hsp var mb_str, int mb_len, var os_str, var os_len

	unicode_cnv_from_multibyte CP_HSP, mb_str, mb_len, os_str, os_len
	return stat

; Unicode 文字列を HSP ランタイムの既定のエンコーディングに変換する
;
; %prm
; os_str, os_len, mb_str, mb_len
;
; var os_str: 変換元の Unicode 文字列が格納された変数
; int os_len: os_str の文字数 (バイト数の半分)
; var mb_str: 変換後のマルチバイト文字列が格納される変数
; var mb_len: mb_str のバイト数が格納される変数
;
; stat: 成功したら true
;
; %inst
; mb_str を事前に初期化する必要はない。
; mb_str は NULL 終端される。
#deffunc unicode_cnv_to_hsp var os_str, int os_len, var mb_str, var mb_len

	unicode_cnv_to_multibyte CP_HSP, os_str, os_len, mb_str, mb_len
	return stat

#global

#endif
