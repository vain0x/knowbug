
#ifndef included_mod_child_process_hsp
#define included_mod_child_process_hsp

#include "kernel32.as"

; サブプロセス作成モジュール
;
; %inst
; 使い方は child_process_spawn を参照してください
;
; %note
; Win32 API を使用するため、Windows 上でのみ動作します
#module m_child_process

#define true 1
#define false 0

#define NULL 0

; 配列の要素番号
#enum k_cp_zero = 0
#enum k_cp_process_handle
#enum k_cp_thread_handle
#enum k_cp_max

; サブプロセスに関するリソースを解放する
;
; %prm
;
; array inner: サブプロセスを管理するための配列変数
;
; %inst
; サブプロセスが終了した後、必ずこの命令を実行して、
; 確保されているリソースを解放してください
#deffunc child_process_close array inner

	CloseHandle inner(k_cp_process_handle)
	CloseHandle inner(k_cp_thread_handle)
	return

; サブプロセスを起動する
;
; %prm
; inner, cmdline
;
; array inner: サブプロセスを管理するための配列変数
; str cmdline: サブプロセスを起動するコマンドライン
;
; stat: 成功したら true
;
; %inst
; サブプロセスを起動します。
;
; child_process_wait 命令によってサブプロセスの終了を待機できます。
;
; そのサブプロセスを利用しなくなったとき、child_process_close 命令を使って、この命令が確保したリソースを解放してください。
#deffunc child_process_spawn array inner, str cmdline, \
	local os_cmdline, local startup_info, local proc_info

	dim inner, k_cp_max

	sdim os_cmdline, strlen(cmdline) * 2 + 2
	cnvstow os_cmdline, cmdline

	; STARTUPINFOW
	dim startup_info, 17 * 4
	startup_info(0) = 17 * 4

	; PROCESS_INFORMATION
	dim proc_info, 4 * 4

	; 起動
	CreateProcessW NULL, varptr(os_cmdline), NULL, NULL, true, 0, NULL, NULL, varptr(startup_info), varptr(proc_info)
	if stat == 0 {
		logmes "サブプロセスを起動できません。"
		inner(k_cp_process_handle) = 0
		inner(k_cp_thread_handle) = 0
		return false
	}

	assert proc_info(0) != 0 ; hProcess
	inner(k_cp_process_handle) = proc_info(0)
	inner(k_cp_thread_handle) = proc_info(1) ; hThread
	return true

; サブプロセスの終了を待つ
;
; %prm
; inner, timeout
;
; array inner: サブプロセスを管理するための配列変数
; int timeout: タイムアウト時間 (ミリ秒)
;
; stat: 終了したら true、タイムアウトしたら false
;
; %inst
; サブプロセスが終了するのを最大 timeout ミリ秒間待機します。
; 待機中にサブプロセスが終了した、あるいはすでに終了していたら true を返します。
; 時間内に終了しなければ false を返します。
;
; timeout に -1 を指定することで、無期限に待機できます。
#deffunc child_process_wait array inner, int timeout

	assert inner(k_cp_process_handle) != 0

	WaitForSingleObject inner(k_cp_process_handle), timeout
	return stat == 0

; サブプロセスの終了コードを取得する
;
; %prm
; inner, exit_code
;
; array inner: サブプロセスを管理するための配列変数
; var exit_code: 終了コードを格納する先の変数
;
; stat: 成功したら true
;
; %inst
; サブプロセスの終了コードを取得します。
;
; サブプロセスが終了したことを確認した後に実行してください。
#deffunc child_process_get_exit_code array inner, var exit_code

	assert inner(k_cp_process_handle) != 0

	GetExitCodeProcess inner(k_cp_process_handle), varptr(exit_code)
	return stat != 0

#global

#endif
