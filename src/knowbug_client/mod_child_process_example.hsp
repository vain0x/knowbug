; mod_child_process のサンプル

; 試すには、実行ファイルを作成して、コマンドラインから起動すること。

#runtime "hsp3cl"
#packopt name "mod_child_process_example"

#include "mod_child_process.hsp"

#define true 1
#define false 0

	; UTF-8文字列を出力したとき文字化けしないようにする
	SetConsoleOutputCP 65001  ; (CP_UTF8)

	; このプログラムは、これ自身を `--worker` という引数つきで、このプログラム自身を起動します。
	; その場合、ワーカープロセス
	if dir_cmdline == "--worker" {
		gosub *l_worker
	} else {
		gosub *l_main
	}
	end

; ================================================

*l_main

	s_cmdline = "./mod_child_process_example.exe --worker"

	; サブプロセスを起動します。
	; (サンプルのためにサブプロセスを用意するのは手間なので、
	;  この実行ファイル自身がサンプルアプリとして機能するようになっています。
	;  `--worker` 引数つきで起動された場合、適当な処理を行って終了します。)
	child_process_spawn cp, s_cmdline
	if stat == false {
		mes "spawn failed"
		goto *l_error
	}

	s_child_is_running = true

	repeat
		writeln "[parent] サブプロセスを待機しています..."

		if s_child_is_running {
			child_process_wait cp, 1  ; 1ms だけ待つ
			if stat {
				writeln "[parent] サブプロセスが終了しました"
				s_child_is_running = false
			}
		}

		if s_child_is_running == false {
			break
		}
		await 300
	loop

	child_process_get_exit_code cp, s_exit_code
	mes "[parent] exit_code = " + s_exit_code

	child_process_close cp

	mes "OK"
	return

; 適当にカウントダウンして終了します。
*l_worker

	mes "[worker] dir_cmdline = \"" + dir_cmdline + "\""

	repeat 10, 1
		mes "[worker] cnt = " + cnt
		wait 20
	loop
	end

*l_error

	mes "error!"
	end 1



#module

; from kernel32.as
#uselib "kernel32.dll"
#func GetStdHandle "GetStdHandle" sptr
#func WriteFile "WriteFile" sptr,sptr,sptr,sptr,sptr

; 文字列を標準出力に書き込む
;
; 事前に SetConsoleOutputCP をしておく必要がある。
; mes命令でUTF-8文字列を出すとなぜか文字化けしてしまああう。(理由はよく分からない)
#deffunc writeln str text, \
	local h_stdout, local text_var

	; 標準出力のファイルハンドルを取得する
	GetStdHandle -11 ; STD_OUTPUT_HANDLE
	h_stdout = stat

	text_var = text
	text_var += "\n"

	WriteFile h_stdout, varptr(text_var), strlen(text_var), 0, 0
	return

#global
