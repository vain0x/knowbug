; v0.1.0

#ifndef included_mod_knowbug_protocol_hsp
#define included_mod_knowbug_protocol_hsp

#include "mod_buf.hsp"

; knowbug のサーバーとクライアントの間の通信プロトコル (暫定版)
#module m_knowbug_protocol

#define true 1
#define false 0

#define char_lf 0x0a

; data をエスケープした文字列を buf の末尾に書き込む
; buf_len の値は書き込んだ長さだけ増加する。
#deffunc local escape_str var data, int data_offset, int data_len, var buf, var buf_len, \
	local i, local last, local c

	assert data_offset >= 0
	assert data_len >= 0

	i = data_offset
	last = data_offset

	repeat
		if i >= data_offset + data_len {
			gosub *l_escape_commit
			break
		}

		c = peek(data, i)
		if c == 0 || c == ' ' || c == '\t' || c == '\r' || c == char_lf || c == '=' || c == '"' || c == '\\' {
			gosub *l_escape_commit

			buf_add_str buf, buf_len, strf("\\x%02x", c)
			buf_len += stat

			i++
			last = i
			continue
		}

		i++
	loop

	return

*l_escape_commit

	buf_add_slice buf, buf_len, data, last, i - last
	buf_len += stat
	return

; エスケープされた文字列を元に戻したものを buf の末尾に書き込む
; buf_len の値は書き込んだ長さだけ増加する。
#deffunc local unescape_str var data, int data_offset, int data_len, var buf, var buf_len, \
	local i, local last, local c, local verbatim_len

	assert data_offset >= 0
	assert data_len >= 0

	i = data_offset
	last = data_offset

	repeat
		verbatim_len = instr(data, i, "\\")

		; エスケープシーケンスが処理する範囲内にないとき
		if verbatim_len < 0 || i + verbatim_len + 4 > data_len {
			i = data_len
			gosub *l_unescape_commit
			break
		}

		; 次のエスケープシーケンスまでの間にある文字列をバッファにコピーする。
		i += verbatim_len
		gosub *l_unescape_commit

		assert data_offset <= i && i + 4 <= data_len
		assert peek(data, i) == '\\'
		assert peek(data, i + 1) == 'x'

		c = int("$" + strmid(data, i + 2, 2))

		buf_add_byte buf, buf_len, c
		buf_len++

		i += 4
		last = i
	loop

	buf_add_byte buf, buf_len, 0
	return

*l_unescape_commit

	buf_add_slice buf, buf_len, data, last, i - last
	buf_len += stat
	return

; バッファにメッセージを書く
;
; %prm
; keys, values, value_lens, count, buf, buf_len
;
; array keys: メッセージに含めるキーのリストが格納されている配列変数
; array values: メッセージに含める値のリストが格納されている配列変数
; array value_lens: values の長さが格納されている配列変数
; int count: メッセージに含めるキーと値のペアの個数
; var buf: メッセージを書き込む先の変数
; var buf_len: メッセージの書き込み先の位置を持つ変数
;
; %inst
; buf の位置 buf_len に knowbug protocol のメッセージを書き込む。
; 詳細は knowbug リポジトリに含まれる knowbug-protocol.md を参照。
;
; knowbug protocol の規約上、keys(0) は "method" でなければならない。
;
; 実行後、変数 buf_len は書き込まれたメッセージの末尾の位置を指す。
#deffunc knowbug_protocol_serialize array keys, array values, array value_lens, int count, var buf, var index

	assert length(keys) >= count
	assert length(values) >= count
	assert count >= 1
	assert keys(0) == "method"

	repeat count
		escape_str keys(cnt), 0, strlen(keys(cnt)), buf, index

		buf_add_str buf, index, " = "
		index += stat

		escape_str values(cnt), 0, value_lens(cnt), buf, index

		buf_add_str buf, index, "\n"
		index += stat
	loop
	return

; メッセージを解析する
;
; %prm
; buf, buf_len, keys, values, value_lens, count
;
; var buf: メッセージが格納されている文字列型変数
; int buf_len: buf の長さ (バイト数)
; array keys: メッセージに含まれるキーのリストを格納する先の配列変数
; array values: メッセージに含まれる値のリストを格納する先の配列変数
; array value_lens: values の長さを格納する先の配列変数
; var count: メッセージに含まれるキーと値のペアの個数を格納する先の変数
;
; stat: メッセージを取り出したら true
;
; %inst
; buf に書き込まれているメッセージを解析して、その内容を keys, values, value_lens, count に設定する。
;
; knowbug protocol の規約上、count >= 1 かつ keys(0) == "method" が保証される。
; もしそうでなければ stat = false になる。
#deffunc knowbug_protocol_parse var buf, int buf_len, array keys, array values, array value_lens, var count, \
	local line_count, local key_len

	s_body_buf = ""
	s_lines = ""
	s_key = ""
	s_value = ""
	count = 0

	if varsize(s_body_buf) <= buf_len {
		memexpand s_body_buf, limit(buf_len + 1, varsize(s_body_buf) * 2, 0x7fffffff)
	}

	memcpy s_body_buf, buf, buf_len
	poke s_body_buf, buf_len, 0

	split s_body_buf, "\n", s_lines
	line_count = stat

	repeat line_count
		if s_lines(cnt) == "" {
			continue
		}

		split s_lines(cnt), "=", s_key, s_value
		assert stat == 2

		s_key = strtrim(s_key)
		s_value = strtrim(s_value)

		keys(count) = ""
		key_len = 0
		unescape_str s_key, 0, strlen(s_key), keys(count), key_len

		values(count) = ""
		value_lens(count) = 0

		; エスケープシーケンスを1つずつ展開すると遅いので、頻出のものは strrep で一括置換する。
		strrep s_value, "\\x20", " "
		strrep s_value, "\\x0d\\x0a", "\n"
		unescape_str s_value, 0, strlen(s_value), values(count), value_lens(count)

		count++
	loop

	return count >= 1 && keys(0) == "method"

; 文字列が true を表しているか？
#deffunc knowbug_protocol_is_true str value

	return value == "true" || value == "yes" || value == "1"

#global

#endif
