
#ifndef included_mod_menu_hsp
#define included_mod_menu_hsp

; メニューバー・ポップアップメニューのモジュール
;
; %note
; mod_menu.hsp を #include すること。
; Win32 API を使用するため、Windows 上でのみ動作する。
#module m_menu

#uselib "user32.dll"
#func CreateMenu        "CreateMenu"
#func CreatePopupMenu   "CreatePopupMenu"
#func AppendMenu        "AppendMenuA"       int, int, int, sptr
#func CheckMenuItem     "CheckMenuItem"     int, int, int
#func DestroyMenu       "DestroyMenu"       int
#func DrawMenuBar       "DrawMenuBar"       int
#func SetMenu           "SetMenu"           int, int
#func TrackPopupMenuEx  "TrackPopupMenuEx"  int, int, int, int, int, int

#define NULL 0

#define MF_STRING               0x00000000
#define MF_GRAYED               0x00000001
#define MF_DISABLED             0x00000002
#define MF_CHECKED              0x00000008
#define MF_POPUP                0x00000010
#define MF_BYPOSITION           0x00000400
#define MF_SEPARATOR            0x00000800

#define TPM_RETURNCMD           0x0100

	dim s_menu_handle_count
	dim s_menu_handles
	dim s_last_id

#deffunc menu_onexit onexit

	repeat s_menu_handle_count
		DestroyMenu s_menu_handles(cnt)
	loop
	s_menu_handle_count = 0
	return

; 現在のウィンドウにメニューバーを追加する
;
; %prm
; other_window_handle
;
; int other_window_handle (hwnd): メニューバーを追加する対象のウィンドウ (省略可)
;
; stat: メニューバーのハンドル
;
; %inst
; メニューバーを変更した場合は、その後 menu_redraw_bar を呼ぶこと。
#deffunc menu_make_bar int other_window_handle, \
	local window_handle, local menu_handle

	window_handle = other_window_handle
	if window_handle == 0 {
		window_handle = hwnd
	}

	CreateMenu
	assert stat
	menu_handle = stat

	SetMenu window_handle, menu_handle
	assert stat
	return menu_handle

; 現在のウィンドウのメニューバーを再描画する
;
; %prm
; other_window_handle
;
; int other_window_handle (hwnd): メニューバーを再描画する対象のウィンドウ (省略可)
#deffunc menu_redraw_bar int other_window_handle, \
	local window_handle

	window_handle = other_window_handle
	if window_handle == 0 {
		window_handle = hwnd
	}

	DrawMenuBar window_handle
	assert stat
	return

; ポップアップメニューを作成する
;
; %inst
; 他のメニューやメニューバーに属さないポップアップメニューを新しく作る。
;
; サブメニューを作成する場合は、これではなく menu_add_popup を使用すること。
#deffunc menu_make_popup \
	local menu_handle

	CreatePopupMenu
	assert stat
	menu_handle = stat

	; ポップアップメニューのルートは破棄しなければいけない。
	s_menu_handles(s_menu_handle_count) = menu_handle
	s_menu_handle_count++

	return menu_handle

; メニューに区切り線 (----) を追加する
;
; %prm
; menu_handle
;
; int menu_handle: メニュー項目を追加する対象のメニュー
#deffunc menu_add_sep int menu_handle

	AppendMenu menu_handle, MF_SEPARATOR, NULL, NULL
	return

; メニューにテキスト項目を追加する
;
; %prm
; menu_handle, label, item_id
;
; int menu_handle: メニュー項目を追加する対象のメニュー
; str label: メニュー項目に表示するテキスト
; int item_id: メニュー項目の識別子
;
; %inst
; item_id は 1 以上の適当な整数を指定する。
; ただし、複数のメニュー項目に同じ item_id を使うことはできない。
; この値は WM_COMMAND などでメニュー項目を指すときに使われる。
#deffunc menu_add_text int menu_handle, str label, int item_id

	assert item_id

	AppendMenu menu_handle, MF_STRING, item_id, label
	assert stat
	return

; サブメニューを持つメニュー項目を追加する
;
; %prm
; menu_handle, label
;
; int menu_handle: メニュー項目を追加する対象のメニュー
; str label: メニュー項目に表示するテキスト
;
; stat: サブメニューのハンドル
#deffunc menu_add_popup int menu_handle, str label, \
	local submenu_handle

	CreatePopupMenu
	assert stat
	submenu_handle = stat

	AppendMenu menu_handle, MF_POPUP, submenu_handle, label
	return submenu_handle

; メニュー項目にチェックをつけるか、チェックを外す
;
; %prm
; menu_handle, item_id, is_checked
;
; int menu_handle: メニュー項目を追加する対象のメニュー
; int item_id: メニュー項目の識別子
; int is_checked: チェックをつけるか
#deffunc menu_check_by_id int menu_handle, int item_id, int is_checked, \
	local flag

	assert item_id

	if is_checked {
		flag |= MF_CHECKED
	}

	CheckMenuItem menu_handle, item_id, flag
	return

; ポップアップメニューを表示する
;
; %prm
; menu_handle, other_window_handle
;
; int menu_handle: 表示するメニュー
; int window_handle (hwnd): メニューからの通知を受け取るウィンドウ (省略可)
;
; stat: 選択されたメニュー項目の識別子。選択されなければ 0。
#deffunc menu_show_popup int menu_handle, int other_window_handle, \
	local window_handle

	window_handle = other_window_handle
	if window_handle == 0 {
		window_handle = hwnd
	}

	TrackPopupMenuEx menu_handle, TPM_RETURNCMD, ginfo_mx + 4, ginfo_my + 4, window_handle, NULL
	return stat

#global

#endif
